import { getToken } from "next-auth/jwt";
import { NextResponse, type NextRequest } from "next/server";

const PRIVATE_PATHS = ["/profile", "/settings", "/dashboard"];

export async function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;

  const userAgent = req.headers.get("user-agent") || "";
  const isMobile =
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      userAgent
    );

  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
  if (!isMobile && !pathname.startsWith("/desktop-blocked")) {
    return NextResponse.redirect(new URL("/desktop-blocked", req.url));
  }

  // –ï—Å–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  if (isMobile && pathname.startsWith("/desktop-blocked")) {
    return NextResponse.redirect(new URL("/", req.url));
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });

  // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ "/", —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ /homepage
  if (pathname === "/" && token) {
    return NextResponse.redirect(new URL("/homepage", req.url));
  }

  const isPrivatePath = PRIVATE_PATHS.some((p) => pathname.startsWith(p));

  // –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–æ—É—Ç ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (!isPrivatePath) return NextResponse.next();

  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
  if (token?.error === "RefreshAccessTokenError") {
    console.log(
      "üö´ Middleware: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Ä–µ—Ñ—Ä–µ—à–∞ —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω"
    );
    return NextResponse.redirect(new URL("/login", req.url));
  }

  // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (token) return NextResponse.next();

  // –ò–Ω–∞—á–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –ª–æ–≥–∏–Ω
  console.log("üö´ Middleware: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω");
  return NextResponse.redirect(new URL("/login", req.url));
}

export const config = {
  matcher: ["/((?!api/auth|_next/static|_next/image|favicon.ico).*)"],
};
