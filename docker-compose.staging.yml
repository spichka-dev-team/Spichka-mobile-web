networks:
  spichka-network:
    #driver: bridge
    external: true
    # if external then: docker network create spichka-network

#volumes:
#  static_data:
#  media_data:
#  next_cache:


services:
  # Frontend app - do NOT publish external port in staging. Nginx will proxy.
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: "1"
    env_file:
      - ./frontend/.env
    restart: unless-stopped
    # Do not publish 3000 to host in staging; nginx will route to container network
    #ports:
    #  - "3000:3000"
    expose:
      - "3000"
    volumes:
      - next_cache:/app/.next
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - spichka-network

  # Nginx load balancer for staging — will proxy requests to frontend service
  #nginx:
  #  build:
  #    context: ./nginx
  #    dockerfile: Dockerfile
  #  container_name: front-nginx_staging
  #  volumes:
  #    - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
  #    - static_data:/app/static
  #    - media_data:/app/media
  #  ports:
  #    - 80:80
  #    #- 443:443
  #  #ports:
  #    # Expose staging nginx HTTP on host port 3000 so you can test frontend at http://localhost:3000
  #    #- "3000:80"
  #    # Do NOT bind 8055 here — leave host 8055 free for your backend Traefik/Directus service
  #  depends_on:
  #    - frontend
  #  restart: unless-stopped
  #  networks:
  #    - spichka-network

# To scale frontend for testing in staging run: docker compose -f docker-compose.staging.yml up --scale frontend=2 --build
# or: docker compose -f .\docker-compose.staging.yml up -d --no-deps --scale frontend=2 frontend
