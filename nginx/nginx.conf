## STAGING nginx.conf: simple HTTP load-balancer and reverse-proxy
## This file is intended for docker-compose staging tests (no TLS required).

## Use Docker's internal DNS resolver to allow nginx to resolve 'frontend' at runtime.
resolver 127.0.0.11 valid=5s ipv6=off;

server {
    listen 80;
    # Accept any host for staging tests
    server_name _;

    # upstream host as variable forces nginx to resolve name using 'resolver' at runtime
    set $upstream_host "frontend:3000";

    location /healthz {
        return 200 'ok';
    }

    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Upstream $upstream_addr;
        proxy_read_timeout 90s;
        proxy_send_timeout 90s;

        # proxy_pass with variable triggers DNS resolution using the 'resolver' above
        proxy_pass http://$upstream_host;
    }
}

## Note: your production nginx.conf is preserved in the repository as `nginx/prod.conf`.
## Use that file for systemd-managed nginx on the production host. The staging conf above
## purposefully avoids TLS and host-bound cert paths so it can run on developer machines.